.env:
  variables:
    CUDA_VERSION: "12.9.0"
    OTB_VERSION: "9.1.1"
    PYTHON_VERSION: "3.12.10"
    GIT_VERSION: "2.49.0"

.before-script-build: &before-script-build
  - |
    if [[ -n "$CI_BUILD_PLATFORMS" ]]; then
      export OS_ARCH=$(echo $CI_BUILD_PLATFORMS \
        | tr ',' '\n' \
        | tr '[:space:]' '\n' \
        | sed '/^$/d' \
        | sed 's|\/||2' \
        | sed 's|\/|-|' \
        | paste -d ' ' -s -)
    fi
  - |
    export CI_APP_REPO=${CI_APP_REPO:-$CI_REGISTRY_IMAGE}
    if [[ $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "ltr" ]]; then
      export CI_APP_TAG=${CI_APP_TAG:-$QGIS_VERSION}
    else
      export CI_APP_TAG=${CI_APP_TAG:-$CI_COMMIT_SHA}
    fi

    export VERSION_MAJ_MIN=${QGIS_VERSION%.*}

    export VERSION_MAJ=${QGIS_VERSION%%.*}

  - |
    echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER \
      --password-stdin $CI_REGISTRY

    if [[ -n "$DOCKER_HUB_REPO" ]]; then
      echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER \
        --password-stdin docker.io
      export CI_APP_REPO="$CI_APP_REPO $DOCKER_HUB_REPO"
    fi

    if [[ -n "$QUAY_REPO" ]]; then
      echo $QUAY_PASSWORD | docker login -u $QUAY_USER \
        --password-stdin quay.io
      export CI_APP_REPO="$CI_APP_REPO $QUAY_REPO"
    fi

.build:
  image: quay.io/bedata/docker:dind
  extends: .env
  stage: build
  services:
    - name: quay.io/bedata/docker:dind
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    BUILDX_NO_DEFAULT_ATTESTATIONS: "true"
  before_script:
    - *before-script-build
  retry: 2

.build-image:
  extends: .build
  tags:
    - arch:${ARCH}
    - os:linux
  script:
    - export BUILD_START=$(date -uIseconds)
    - |
      for i in $CI_APP_REPO; do
        docker build \
          --build-arg BASE_IMAGE \
          --build-arg BASE_IMAGE_TAG \
          --build-arg CUDA_IMAGE \
          --build-arg CUDA_IMAGE_SUBTAG \
          --build-arg CUDA_IMAGE_LICENSE \
          --build-arg CUDA_VERSION \
          --build-arg QGIS_VERSION \
          --build-arg SAGA_VERSION \
          --build-arg OTB_VERSION \
          --build-arg PROC_SAGA_NG_VERSION \
          --build-arg PYTHON_VERSION \
          --build-arg GIT_VERSION \
          --build-arg BUILD_START \
          -t $i:$CI_APP_TAG-linux-${ARCH//\/} \
          -t $i:${ADD_TAG:-latest}-linux-${ARCH//\/} \
          base

        docker build \
          --build-arg BUILD_ON_IMAGE=$i:$CI_APP_TAG-linux-${ARCH//\/} \
          --build-arg BUILD_START \
          -t $i:$CI_APP_TAG-root-linux-${ARCH//\/} \
          -t $i:${ADD_TAG:-latest}-root-linux-${ARCH//\/} \
          common/subtags/root
      done
    - |
      for i in $CI_APP_REPO; do
        docker push $i:$CI_APP_TAG-linux-${ARCH//\/}
        docker push $i:${ADD_TAG:-latest}-linux-${ARCH//\/}
        docker push $i:$CI_APP_TAG-root-linux-${ARCH//\/}
        docker push $i:${ADD_TAG:-latest}-root-linux-${ARCH//\/}
      done
  parallel:
    matrix:
      - ARCH: ["amd64", "arm64/v8"]

.build-manifest:
  extends: .build
  script:
    - |
      for i in $CI_APP_REPO; do
        unset CI_MANIFEST_LIST
        unset CI_MANIFEST_LIST_ROOT
        for j in $OS_ARCH; do
          export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $i:$CI_APP_TAG-$j"
          export CI_MANIFEST_LIST_ROOT="$CI_MANIFEST_LIST_ROOT $i:$CI_APP_TAG-root-$j"
        done

        docker manifest create $i:$CI_APP_TAG $CI_MANIFEST_LIST
        docker manifest create $i:$CI_APP_TAG-root $CI_MANIFEST_LIST_ROOT
        if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
          docker manifest annotate --variant v8 $i:$CI_APP_TAG \
            $i:$CI_APP_TAG-linux-arm64v8
          docker manifest annotate --variant v8 $i:$CI_APP_TAG-root \
            $i:$CI_APP_TAG-root-linux-arm64v8
        fi
        docker manifest push $i:$CI_APP_TAG
        docker manifest push $i:$CI_APP_TAG-root

        docker manifest create $i:$VERSION_MAJ_MIN${ADD_TAG:+-}${ADD_TAG} $CI_MANIFEST_LIST
        docker manifest create $i:$VERSION_MAJ_MIN${ADD_TAG:+-}${ADD_TAG}-root $CI_MANIFEST_LIST_ROOT
        if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
          docker manifest annotate --variant v8 $i:$VERSION_MAJ_MIN${ADD_TAG:+-}${ADD_TAG} \
            $i:$CI_APP_TAG-linux-arm64v8
          docker manifest annotate --variant v8 $i:$VERSION_MAJ_MIN${ADD_TAG:+-}${ADD_TAG}-root \
            $i:$CI_APP_TAG-root-linux-arm64v8
        fi
        docker manifest push $i:$VERSION_MAJ_MIN${ADD_TAG:+-}${ADD_TAG}
        docker manifest push $i:$VERSION_MAJ_MIN${ADD_TAG:+-}${ADD_TAG}-root

        docker manifest create $i:$VERSION_MAJ${ADD_TAG:+-}${ADD_TAG} $CI_MANIFEST_LIST
        docker manifest create $i:$VERSION_MAJ${ADD_TAG:+-}${ADD_TAG}-root $CI_MANIFEST_LIST_ROOT
        if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
          docker manifest annotate --variant v8 $i:$VERSION_MAJ${ADD_TAG:+-}${ADD_TAG} \
            $i:$CI_APP_TAG-linux-arm64v8
          docker manifest annotate --variant v8 $i:$VERSION_MAJ${ADD_TAG:+-}${ADD_TAG}-root \
            $i:$CI_APP_TAG-root-linux-arm64v8
        fi
        docker manifest push $i:$VERSION_MAJ${ADD_TAG:+-}${ADD_TAG}
        docker manifest push $i:$VERSION_MAJ${ADD_TAG:+-}${ADD_TAG}-root

        docker manifest create $i:${ADD_TAG:-latest} $CI_MANIFEST_LIST
        docker manifest create $i:${ADD_TAG:-latest}-root $CI_MANIFEST_LIST_ROOT
        if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
          docker manifest annotate --variant v8 $i:${ADD_TAG:-latest} \
            $i:$CI_APP_TAG-linux-arm64v8
          docker manifest annotate --variant v8 $i:${ADD_TAG:-latest}-root \
            $i:$CI_APP_TAG-root-linux-arm64v8
        fi
        docker manifest push $i:${ADD_TAG:-latest}
        docker manifest push $i:${ADD_TAG:-latest}-root
      done

build-image:latest:
  extends: .build-image
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_TRIGGERED

build-image:ltr:
  extends: .build-image
  variables:
    ADD_TAG: ltr
  rules:
    - if: $CI_COMMIT_BRANCH == "ltr" && $CI_PIPELINE_TRIGGERED

build-manifest:latest:
  extends: .build-manifest
  needs: ["build-image:latest"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_TRIGGERED

build-manifest:ltr:
  extends: .build-manifest
  needs: ["build-image:ltr"]
  variables:
    ADD_TAG: ltr
  rules:
    - if: $CI_COMMIT_BRANCH == "ltr" && $CI_PIPELINE_TRIGGERED
